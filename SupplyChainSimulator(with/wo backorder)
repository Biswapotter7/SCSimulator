{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Biswapotter7/SCSimulator/blob/main/SupplyChainSimulator(with/wo%20backorder)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "IMmFrb_brC2L",
        "outputId": "ac53fbc2-049d-4957-8ed0-9f80c1ffbef2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: simpy in /usr/local/lib/python3.10/dist-packages (4.1.1)\n",
            "Manufacturer inventory: 0, cost: 0.0\n",
            "Distributor inventory: 0, cost: 0.0\n",
            "Wholesaler inventory: 0, cost: 0.0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, cost: 0.0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, cost: 0.0\n",
            "Wholesaler inventory: 0, cost: 0.0\n",
            "Distributor inventory: 0, cost: 0.0\n",
            "Manufacturer inventory: 0, cost: 0.0\n"
          ]
        },
        {
          "ename": "TypeError",
          "evalue": "Wholesaler.receive_order() takes 1 positional argument but 2 were given",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-07daa73aa4be>\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlead_time\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplace_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-8-07daa73aa4be>\u001b[0m in \u001b[0;36mplace_order\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     47\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOrderList\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mincomingOrder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreceive_order_from_supplier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minventory\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mincomingOrder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-8-07daa73aa4be>\u001b[0m in \u001b[0;36mreceive_order_from_supplier\u001b[0;34m(self, order)\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreceive_order_from_supplier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwholesaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreceive_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Wholesaler.receive_order() takes 1 positional argument but 2 were given",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-07daa73aa4be>\u001b[0m in \u001b[0;36m<cell line: 172>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    170\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 172\u001b[0;31m \u001b[0mrun_simulation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-8-07daa73aa4be>\u001b[0m in \u001b[0;36mrun_simulation\u001b[0;34m()\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmanufacturer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m     \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muntil\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Run the simulation for 50 time steps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0mentities\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mretailer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwholesaler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistributor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmanufacturer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/simpy/core.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, until)\u001b[0m\n\u001b[1;32m    244\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 246\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    247\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopSimulation\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# == until.value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/simpy/core.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    202\u001b[0m             \u001b[0mexc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mevent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__cause__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 204\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muntil\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mUnion\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mSimTime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mEvent\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Wholesaler.receive_order() takes 1 positional argument but 2 were given"
          ]
        }
      ],
      "source": [
        "!pip install simpy\n",
        "\n",
        "import simpy\n",
        "import random\n",
        "import numpy as np\n",
        "from scipy.stats import norm\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.core.interactiveshell import InteractiveShell\n",
        "InteractiveShell.ast_node_interactivity = \"all\"\n",
        "\n",
        "class DemandGenerator:\n",
        "    def __init__(self):\n",
        "        self.demand_probabilities = [0.15, 0.15, 0.7]\n",
        "        self.demand_values = [100000, 150000, 200000]\n",
        "\n",
        "    def generate_demand(self):\n",
        "        return random.choices(self.demand_values, self.demand_probabilities)[0]\n",
        "\n",
        "class SupplyChainEntity:\n",
        "    def __init__(self, env, name, lead_time, holding_cost, missed_order_cost):\n",
        "        self.env = env\n",
        "        self.name = name\n",
        "        self.lead_time = lead_time\n",
        "        self.holding_cost = holding_cost\n",
        "        self.missed_order_cost = missed_order_cost\n",
        "        self.incomingOrder = 0\n",
        "        self.outgoingOrder = 0\n",
        "        self.inventory = 0\n",
        "        self.costs = []\n",
        "        self.demandList = []\n",
        "        self.optimalQtyList = []\n",
        "        self.OrderList = []\n",
        "        self.inventoryList = []\n",
        "        self.action = env.process(self.run())\n",
        "\n",
        "    def cal_optimal_quantity(self):\n",
        "        mu = np.mean(self.demandList)\n",
        "        sigma = np.std(self.demandList)\n",
        "        criticalRatio = self.missed_order_cost / (self.missed_order_cost + self.holding_cost)\n",
        "        return round(sigma * norm.ppf(criticalRatio) + mu, 0)\n",
        "\n",
        "    def place_order(self):\n",
        "        optimalQuantity = self.cal_optimal_quantity()\n",
        "        self.optimalQtyList.append(optimalQuantity)\n",
        "        if self.inventory < optimalQuantity:\n",
        "            order = optimalQuantity - self.inventory\n",
        "            self.OrderList.append(order)\n",
        "            self.incomingOrder = self.receive_order_from_supplier(order)\n",
        "            self.inventory += self.incomingOrder\n",
        "            self.inventoryList.append(self.inventory)\n",
        "            print(f\"{self.name} placed order: {order}, received: {self.incomingOrder}, new inventory: {self.inventory}\")\n",
        "        else:\n",
        "            self.OrderList.append(0)\n",
        "            print(f\"{self.name} placed no order, inventory sufficient: {self.inventory}\")\n",
        "\n",
        "    def run(self):\n",
        "        while True:\n",
        "            self.receive_order()\n",
        "            cost = self.inventory * self.holding_cost if self.inventory >= 0 else abs(self.inventory * self.missed_order_cost)\n",
        "            self.costs.append(cost)\n",
        "            print(f\"{self.name} inventory: {self.inventory}, cost: {cost}\")\n",
        "            yield self.env.timeout(self.lead_time)\n",
        "            self.place_order()\n",
        "\n",
        "    def receive_order(self):\n",
        "        raise NotImplementedError(\"This method should be implemented by subclasses.\")\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        raise NotImplementedError(\"This method should be implemented by subclasses.\")\n",
        "\n",
        "class Retailer(SupplyChainEntity):\n",
        "    def __init__(self, env, wholesaler):\n",
        "        super().__init__(env, name=\"Retailer\", lead_time=random.randint(1, 4), holding_cost=0.5, missed_order_cost=1)\n",
        "        self.wholesaler = wholesaler\n",
        "        self.demand_generator = DemandGenerator()\n",
        "\n",
        "    def receive_order(self):\n",
        "        demand = self.demand_generator.generate_demand()\n",
        "        self.demandList.append(demand)\n",
        "        self.outgoingOrder = min(self.inventory, demand)\n",
        "        self.inventory -= self.outgoingOrder\n",
        "        print(f\"Retailer demand: {demand}, outgoing order: {self.outgoingOrder}, new inventory: {self.inventory}\")\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        return self.wholesaler.receive_order(order)\n",
        "\n",
        "class Wholesaler(SupplyChainEntity):\n",
        "    def __init__(self, env, distributor):\n",
        "        super().__init__(env, name=\"Wholesaler\", lead_time=random.randint(1, 4), holding_cost=0.5, missed_order_cost=1)\n",
        "        self.distributor = distributor\n",
        "\n",
        "    def receive_order(self):\n",
        "        pass  # Placeholder for Wholesaler specific logic\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        return self.distributor.receive_order(order)\n",
        "\n",
        "class Distributor(SupplyChainEntity):\n",
        "    def __init__(self, env, manufacturer):\n",
        "        super().__init__(env, name=\"Distributor\", lead_time=random.randint(1, 4), holding_cost=0.5, missed_order_cost=1)\n",
        "        self.manufacturer = manufacturer\n",
        "\n",
        "    def receive_order(self):\n",
        "        pass  # Placeholder for Distributor specific logic\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        return self.manufacturer.receive_order(order)\n",
        "\n",
        "class Manufacturer(SupplyChainEntity):\n",
        "    def __init__(self, env):\n",
        "        super().__init__(env, name=\"Manufacturer\", lead_time=random.randint(1, 4), holding_cost=0.5, missed_order_cost=1)\n",
        "\n",
        "    def receive_order(self):\n",
        "        pass  # Placeholder for Manufacturer specific logic\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        self.inventory += order\n",
        "        return order\n",
        "\n",
        "def run_simulation():\n",
        "    env = simpy.Environment()\n",
        "\n",
        "    manufacturer = Manufacturer(env)\n",
        "    distributor = Distributor(env, manufacturer)\n",
        "    wholesaler = Wholesaler(env, distributor)\n",
        "    retailer = Retailer(env, wholesaler)\n",
        "\n",
        "    env.process(retailer.run())\n",
        "    env.process(wholesaler.run())\n",
        "    env.process(distributor.run())\n",
        "    env.process(manufacturer.run())\n",
        "\n",
        "    env.run(until=50)  # Run the simulation for 50 time steps\n",
        "\n",
        "    entities = [retailer, wholesaler, distributor, manufacturer]\n",
        "    labels = ['Retailer', 'Wholesaler', 'Distributor', 'Manufacturer']\n",
        "\n",
        "    for entity, label in zip(entities, labels):\n",
        "        print(f\"{label} demandList:\", entity.demandList)\n",
        "        print(f\"{label} optimalQtyList:\", entity.optimalQtyList)\n",
        "        print(f\"{label} OrderList:\", entity.OrderList)\n",
        "        print(f\"{label} inventoryList:\", entity.inventoryList)\n",
        "        print(f\"{label} costs:\", entity.costs)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for entity, label in zip(entities, labels):\n",
        "        plt.plot(entity.costs, label=label)\n",
        "    plt.xlabel('Time Steps')\n",
        "    plt.ylabel('Weekly Costs ($)')\n",
        "    plt.title('Weekly Costs of Each Entity')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for entity, label in zip(entities, labels):\n",
        "        plt.plot(entity.inventoryList, label=label)\n",
        "    plt.xlabel('Time Steps')\n",
        "    plt.ylabel('Weekly Inventory (Qty)')\n",
        "    plt.title('Weekly Inventory of Each Entity')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for entity, label in zip(entities, labels):\n",
        "        plt.plot(entity.OrderList, label=label)\n",
        "    plt.xlabel('Time Steps')\n",
        "    plt.ylabel('Weekly Order (Qty)')\n",
        "    plt.title('Weekly Order of Each Entity')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "run_simulation()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "JeUUxjU1rhkn",
        "outputId": "e8c72d61-f1f9-4c3f-fdcd-59d42e754b15"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: simpy in /usr/local/lib/python3.10/dist-packages (4.1.1)\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: -150000\n",
            "Retailer inventory: -150000, backorders: 0, cost: -75000.0\n",
            "Retailer placed order: 335768.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: -150000, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 300000, cost: 300000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: -200000\n",
            "Retailer inventory: -200000, backorders: 0, cost: -100000.0\n",
            "Retailer placed order: 385768.0\n",
            "Retailer received order: 335768.0, new inventory: 135768.0\n",
            "Retailer demand: 150000, outgoing order: 135768.0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 14232.0, cost: 14232.0\n",
            "Retailer placed order: 166319.0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000.0, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: -200000\n",
            "Retailer inventory: -200000, backorders: 0, cost: -100000.0\n",
            "Retailer placed order: 389229.0\n",
            "Retailer demand: 200000, outgoing order: -200000, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 400000, cost: 400000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: -150000\n",
            "Retailer inventory: -150000, backorders: 0, cost: -75000.0\n",
            "Retailer placed order: 338479.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer received order: 166319.0, new inventory: 16319.0\n",
            "Retailer received order: 389229.0, new inventory: 405548.0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 255548.0\n",
            "Retailer inventory: 255548.0, backorders: 0, cost: 127774.0\n",
            "Retailer placed no order, inventory sufficient: 255548.0\n",
            "Retailer received order: 338479.0, new inventory: 594027.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer received order: 385768.0, new inventory: 979795.0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 829795.0\n",
            "Retailer inventory: 829795.0, backorders: 0, cost: 414897.5\n",
            "Retailer placed no order, inventory sufficient: 829795.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: 629795.0\n",
            "Retailer inventory: 629795.0, backorders: 0, cost: 314897.5\n",
            "Retailer placed no order, inventory sufficient: 629795.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: 429795.0\n",
            "Retailer inventory: 429795.0, backorders: 0, cost: 214897.5\n",
            "Retailer placed no order, inventory sufficient: 429795.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: 229795.0\n",
            "Retailer inventory: 229795.0, backorders: 0, cost: 114897.5\n",
            "Retailer placed no order, inventory sufficient: 229795.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: 29795.0\n",
            "Retailer inventory: 29795.0, backorders: 0, cost: 14897.5\n",
            "Retailer placed order: 160756.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 29795.0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 170205.0, cost: 170205.0\n",
            "Retailer placed order: 21471.0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000.0, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 100000, outgoing order: 100000, new inventory: -100000\n",
            "Retailer inventory: -100000, backorders: 0, cost: -50000.0\n",
            "Retailer placed order: 290664.0\n",
            "Retailer demand: 200000, outgoing order: -100000, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 300000, cost: 300000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer received order: 160756.0, new inventory: 0\n",
            "Retailer received order: 21471.0, new inventory: 0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000.0, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer received order: 290664.0, new inventory: 90664.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 90664.0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 109336.0, cost: 109336.0\n",
            "Retailer placed order: 84008.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000.0, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer received order: 84008.0, new inventory: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000.0, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: -200000\n",
            "Retailer inventory: -200000, backorders: 0, cost: -100000.0\n",
            "Retailer placed order: 395238.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: -200000, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 400000, cost: 400000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: -200000\n",
            "Retailer inventory: -200000, backorders: 0, cost: -100000.0\n",
            "Retailer placed order: 396212.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: -200000, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 400000, cost: 400000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: -150000\n",
            "Retailer inventory: -150000, backorders: 0, cost: -75000.0\n",
            "Retailer placed order: 345517.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer received order: 395238.0, new inventory: 245238.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 95238.0\n",
            "Retailer inventory: 95238.0, backorders: 0, cost: 47619.0\n",
            "Retailer placed order: 99216.0\n",
            "Retailer demand: 200000, outgoing order: 95238.0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 104762.0, cost: 104762.0\n",
            "Retailer placed order: 90147.0\n",
            "Retailer received order: 345517.0, new inventory: 240755.0\n",
            "Retailer received order: 99216.0, new inventory: 339971.0\n",
            "Retailer received order: 396212.0, new inventory: 736183.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 586183.0\n",
            "Retailer inventory: 586183.0, backorders: 0, cost: 293091.5\n",
            "Retailer placed no order, inventory sufficient: 586183.0\n",
            "Retailer received order: 90147.0, new inventory: 676330.0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: 476330.0\n",
            "Retailer inventory: 476330.0, backorders: 0, cost: 238165.0\n",
            "Retailer placed no order, inventory sufficient: 476330.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 326330.0\n",
            "Retailer inventory: 326330.0, backorders: 0, cost: 163165.0\n",
            "Retailer placed no order, inventory sufficient: 326330.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 176330.0\n",
            "Retailer inventory: 176330.0, backorders: 0, cost: 88165.0\n",
            "Retailer placed order: 16249.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 100000, outgoing order: 100000, new inventory: 76330.0\n",
            "Retailer inventory: 76330.0, backorders: 0, cost: 38165.0\n",
            "Retailer placed order: 115149.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 76330.0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 123670.0, cost: 123670.0\n",
            "Retailer placed order: 68313.0\n",
            "Retailer demand: 100000, outgoing order: 100000, new inventory: -100000\n",
            "Retailer inventory: -100000, backorders: 0, cost: -50000.0\n",
            "Retailer placed order: 290826.0\n",
            "Retailer received order: 290826.0, new inventory: 190826.0\n",
            "Retailer received order: 16249.0, new inventory: 207075.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer received order: 115149.0, new inventory: 322224.0\n",
            "Retailer demand: 200000, outgoing order: 200000, new inventory: 122224.0\n",
            "Retailer inventory: 122224.0, backorders: 0, cost: 61112.0\n",
            "Retailer placed order: 69115.0\n",
            "Retailer received order: 68313.0, new inventory: 190537.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 150000, outgoing order: 150000, new inventory: 40537.0\n",
            "Retailer inventory: 40537.0, backorders: 0, cost: 20268.5\n",
            "Retailer placed order: 150047.0\n",
            "Retailer received order: 69115.0, new inventory: 109652.0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer received order: 150047.0, new inventory: 259699.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Retailer demand: 100000, outgoing order: 100000, new inventory: 159699.0\n",
            "Retailer inventory: 159699.0, backorders: 0, cost: 79849.5\n",
            "Retailer placed order: 29748.0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Distributor inventory: 0, backorders: 0, cost: 0.0\n",
            "Distributor placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 159699.0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 40301.0, cost: 40301.0\n",
            "Retailer placed order: 149675.0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer demand: 200000, outgoing order: 0, new inventory: 0\n",
            "Retailer inventory: 0, backorders: 200000.0, cost: 200000.0\n",
            "Retailer placed no order, inventory sufficient: 0\n",
            "Retailer received order: 149675.0, new inventory: 0\n",
            "Retailer received order: 29748.0, new inventory: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Wholesaler inventory: 0, backorders: 0, cost: 0.0\n",
            "Wholesaler placed no order, inventory sufficient: 0\n",
            "Manufacturer inventory: 0, backorders: 0, cost: 0.0\n",
            "Manufacturer placed no order, inventory sufficient: 0\n",
            "Retailer demandList: [200000, 150000, 150000, 200000, 150000, 200000, 200000, 200000, 150000, 150000, 150000, 200000, 200000, 200000, 200000, 200000, 200000, 100000, 200000, 200000, 200000, 200000, 200000, 200000, 200000, 200000, 200000, 150000, 150000, 200000, 150000, 200000, 150000, 150000, 100000, 200000, 100000, 200000, 150000, 100000, 200000, 200000]\n",
            "Retailer optimalQtyList: [200000.0, 185768.0, 176819.0, 185768.0, 180551.0, 185768.0, 189229.0, 191676.0, 188479.0, 185768.0, 183451.0, 185768.0, 187659.0, 189229.0, 190551.0, 191676.0, 192645.0, 190664.0, 191671.0, 192558.0, 193344.0, 194045.0, 194673.0, 195238.0, 195749.0, 196212.0, 196634.0, 195517.0, 194454.0, 194909.0, 193924.0, 194372.0, 193456.0, 192579.0, 191479.0, 191983.0, 190826.0, 191339.0, 190584.0, 189447.0, 189976.0, 190475.0]\n",
            "Retailer OrderList: [0, 335768.0, 0, 385768.0, 166319.0, 0, 389229.0, 0, 338479.0, 0, 0, 0, 0, 0, 160756.0, 21471.0, 0, 290664.0, 0, 0, 84008.0, 0, 0, 395238.0, 0, 396212.0, 0, 345517.0, 99216.0, 90147.0, 0, 0, 0, 16249.0, 115149.0, 68313.0, 290826.0, 69115.0, 150047.0, 29748.0, 149675.0, 0]\n",
            "Retailer inventoryList: []\n",
            "Retailer backorderList: []\n",
            "Retailer costs: [200000.0, -75000.0, 300000.0, -100000.0, 14232.0, 200000.0, -100000.0, 400000.0, -75000.0, 127774.0, 414897.5, 314897.5, 214897.5, 114897.5, 14897.5, 170205.0, 200000.0, -50000.0, 300000.0, 200000.0, 109336.0, 200000.0, 200000.0, -100000.0, 400000.0, -100000.0, 400000.0, -75000.0, 47619.0, 104762.0, 293091.5, 238165.0, 163165.0, 88165.0, 38165.0, 123670.0, -50000.0, 61112.0, 20268.5, 79849.5, 40301.0, 200000.0]\n",
            "Wholesaler demandList: []\n",
            "Wholesaler optimalQtyList: [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n",
            "Wholesaler OrderList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
            "Wholesaler inventoryList: []\n",
            "Wholesaler backorderList: []\n",
            "Wholesaler costs: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n",
            "Distributor demandList: []\n",
            "Distributor optimalQtyList: [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n",
            "Distributor OrderList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
            "Distributor inventoryList: []\n",
            "Distributor backorderList: []\n",
            "Distributor costs: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n",
            "Manufacturer demandList: []\n",
            "Manufacturer optimalQtyList: [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n",
            "Manufacturer OrderList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
            "Manufacturer inventoryList: []\n",
            "Manufacturer backorderList: []\n",
            "Manufacturer costs: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "!pip install simpy\n",
        "\n",
        "import simpy\n",
        "import random\n",
        "import numpy as np\n",
        "from scipy.stats import norm, expon\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.core.interactiveshell import InteractiveShell\n",
        "InteractiveShell.ast_node_interactivity = \"all\"\n",
        "\n",
        "class DemandGenerator:\n",
        "    def __init__(self):\n",
        "        self.demand_probabilities = [0.15, 0.15, 0.7]\n",
        "        self.demand_values = [100000, 150000, 200000]\n",
        "\n",
        "    def generate_demand(self):\n",
        "        return random.choices(self.demand_values, self.demand_probabilities)[0]\n",
        "\n",
        "class SupplyChainEntity:\n",
        "    def __init__(self, env, name, holding_cost, missed_order_cost, lead_time_mean):\n",
        "        self.env = env\n",
        "        self.name = name\n",
        "        self.holding_cost = holding_cost\n",
        "        self.missed_order_cost = missed_order_cost\n",
        "        self.incomingOrder = 0\n",
        "        self.outgoingOrder = 0\n",
        "        self.inventory = 0\n",
        "        self.backorders = 0\n",
        "        self.costs = []\n",
        "        self.demandList = []\n",
        "        self.optimalQtyList = []\n",
        "        self.OrderList = []\n",
        "        self.inventoryList = []\n",
        "        self.backorderList = []\n",
        "        self.lead_time_mean = lead_time_mean\n",
        "        self.action = env.process(self.run())\n",
        "\n",
        "    def cal_optimal_quantity(self):\n",
        "        mu = np.mean(self.demandList)\n",
        "        sigma = np.std(self.demandList)\n",
        "        criticalRatio = self.missed_order_cost / (self.missed_order_cost + self.holding_cost)\n",
        "        return round(sigma * norm.ppf(criticalRatio) + mu, 0)\n",
        "\n",
        "    def place_order(self):\n",
        "        optimalQuantity = self.cal_optimal_quantity()\n",
        "        self.optimalQtyList.append(optimalQuantity)\n",
        "        if self.inventory + self.backorders < optimalQuantity:\n",
        "            order = optimalQuantity - self.inventory - self.backorders\n",
        "            self.OrderList.append(order)\n",
        "            self.env.process(self.receive_order_from_supplier(order))\n",
        "            print(f\"{self.name} placed order: {order}\")\n",
        "        else:\n",
        "            self.OrderList.append(0)\n",
        "            print(f\"{self.name} placed no order, inventory sufficient: {self.inventory}\")\n",
        "\n",
        "    def run(self):\n",
        "        while True:\n",
        "            yield self.env.timeout(self.generate_lead_time())\n",
        "            self.receive_order()\n",
        "            cost = (self.inventory * self.holding_cost) + (self.backorders * self.missed_order_cost)\n",
        "            self.costs.append(cost)\n",
        "            print(f\"{self.name} inventory: {self.inventory}, backorders: {self.backorders}, cost: {cost}\")\n",
        "            self.place_order()\n",
        "\n",
        "    def receive_order(self):\n",
        "        raise NotImplementedError(\"This method should be implemented by subclasses.\")\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        raise NotImplementedError(\"This method should be implemented by subclasses.\")\n",
        "\n",
        "    def generate_lead_time(self):\n",
        "        return round(expon.rvs(scale=self.lead_time_mean), 0)\n",
        "\n",
        "class Retailer(SupplyChainEntity):\n",
        "    def __init__(self, env, wholesaler):\n",
        "        super().__init__(env, name=\"Retailer\", holding_cost=0.5, missed_order_cost=1, lead_time_mean=2)\n",
        "        self.wholesaler = wholesaler\n",
        "        self.demand_generator = DemandGenerator()\n",
        "\n",
        "    def receive_order(self):\n",
        "        demand = self.demand_generator.generate_demand()\n",
        "        self.demandList.append(demand)\n",
        "        if self.inventory + self.backorders < demand:\n",
        "            self.backorders += demand - (self.inventory + self.backorders)\n",
        "            self.outgoingOrder = self.inventory\n",
        "            self.inventory = 0\n",
        "        else:\n",
        "            self.outgoingOrder = demand\n",
        "            self.inventory -= demand\n",
        "            self.backorders = 0\n",
        "        print(f\"Retailer demand: {demand}, outgoing order: {self.outgoingOrder}, new inventory: {self.inventory}\")\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        yield self.env.timeout(self.generate_lead_time())\n",
        "        self.inventory += order\n",
        "        if self.backorders > 0:\n",
        "            if self.inventory >= self.backorders:\n",
        "                self.inventory -= self.backorders\n",
        "                self.backorders = 0\n",
        "            else:\n",
        "                self.backorders -= self.inventory\n",
        "                self.inventory = 0\n",
        "        print(f\"Retailer received order: {order}, new inventory: {self.inventory}\")\n",
        "        return order\n",
        "\n",
        "class Wholesaler(SupplyChainEntity):\n",
        "    def __init__(self, env, distributor):\n",
        "        super().__init__(env, name=\"Wholesaler\", holding_cost=0.5, missed_order_cost=1, lead_time_mean=3)\n",
        "        self.distributor = distributor\n",
        "\n",
        "    def receive_order(self):\n",
        "        pass\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        yield self.env.timeout(self.generate_lead_time())\n",
        "        self.inventory += order\n",
        "        print(f\"Wholesaler received order: {order}, new inventory: {self.inventory}\")\n",
        "        return order\n",
        "\n",
        "class Distributor(SupplyChainEntity):\n",
        "    def __init__(self, env, manufacturer):\n",
        "        super().__init__(env, name=\"Distributor\", holding_cost=0.5, missed_order_cost=1, lead_time_mean=4)\n",
        "        self.manufacturer = manufacturer\n",
        "\n",
        "    def receive_order(self):\n",
        "        pass\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        yield self.env.timeout(self.generate_lead_time())\n",
        "        self.inventory += order\n",
        "        print(f\"Distributor received order: {order}, new inventory: {self.inventory}\")\n",
        "        return order\n",
        "\n",
        "class Manufacturer(SupplyChainEntity):\n",
        "    def __init__(self, env):\n",
        "        super().__init__(env, name=\"Manufacturer\", holding_cost=0.5, missed_order_cost=1, lead_time_mean=5)\n",
        "\n",
        "    def receive_order(self):\n",
        "        pass\n",
        "\n",
        "    def receive_order_from_supplier(self, order):\n",
        "        yield self.env.timeout(self.generate_lead_time())\n",
        "        self.inventory += order\n",
        "        print(f\"Manufacturer produced order: {order}, new inventory: {self.inventory}\")\n",
        "        return order\n",
        "\n",
        "def run_simulation():\n",
        "    env = simpy.Environment()\n",
        "\n",
        "    manufacturer = Manufacturer(env)\n",
        "    distributor = Distributor(env, manufacturer)\n",
        "    wholesaler = Wholesaler(env, distributor)\n",
        "    retailer = Retailer(env, wholesaler)\n",
        "\n",
        "    env.process(retailer.run())\n",
        "    env.process(wholesaler.run())\n",
        "    env.process(distributor.run())\n",
        "    env.process(manufacturer.run())\n",
        "\n",
        "    env.run(until=50)  # Run the simulation for 50 time steps\n",
        "\n",
        "    entities = [retailer, wholesaler, distributor, manufacturer]\n",
        "    labels = ['Retailer', 'Wholesaler', 'Distributor', 'Manufacturer']\n",
        "\n",
        "    for entity, label in zip(entities, labels):\n",
        "        print(f\"{label} demandList:\", entity.demandList)\n",
        "        print(f\"{label} optimalQtyList:\", entity.optimalQtyList)\n",
        "        print(f\"{label} OrderList:\", entity.OrderList)\n",
        "        print(f\"{label} inventoryList:\", entity.inventoryList)\n",
        "        print(f\"{label} backorderList:\", entity.backorderList)\n",
        "        print(f\"{label} costs:\", entity.costs)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for entity, label in zip(entities, labels):\n",
        "        plt.plot(entity.costs, label=label)\n",
        "    plt.xlabel('Time Steps')\n",
        "    plt.ylabel('Weekly Costs ($)')\n",
        "    plt.title('Weekly Costs of Each Entity')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for entity, label in zip(entities, labels):\n",
        "        plt.plot(entity.inventoryList, label=label)\n",
        "    plt.xlabel('Time Steps')\n",
        "    plt.ylabel('Weekly Inventory (Qty)')\n",
        "    plt.title('Weekly Inventory of Each Entity')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    for entity, label in zip(entities, labels):\n",
        "        plt.plot(entity.OrderList, label=label)\n",
        "    plt.xlabel('Time Steps')\n",
        "    plt.ylabel('Weekly Order (Qty)')\n",
        "    plt.title('Weekly Order of Each Entity')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "run_simulation()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNMu4Say/TwHZbvBgo9jSqS",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}